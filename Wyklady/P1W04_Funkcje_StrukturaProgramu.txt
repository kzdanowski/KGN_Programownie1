Programowanie 1, Wykład 04
Funkcje, argumenty, zmienne globalne, zmienne lokalne, struktura programu

1. Funkcje

Funkcja to ciąg instrukcji, który wykonuje się jako jeden blok.
Funkcja może przyjmować argumenty, od której zależy jej działanie 
oraz zwracać wartość.

Funkcję w Pythonie definiujemy jako:

def nazwa_funkcji(ciąg_argumentów):
"""Opcjonalny opis funkcji"""
    Cialo_Funkcji

def - słowo kluczowe, informuje o definiowaniu funkcji
ciąg_argumentów - w tym miejscu wprowadzamy zmienne, które będą nam służyć
                  do przekazywania informacji (wartości) do funkcji,
                  może być pusty.
Opcjonalny opis funkcji - tutaj znajduje się opis funkcji, nie musimy go
                          wpisywać.
Cialo_Funkcji - wpisujemy z wcięciem 4 spacji.

Argument formalny/parametr to ciąg zmiennych, które są wymienione w deklaracji funkcji.
Argument aktualny, to argument, z którym funkcja jest wywoływana.

Funkcje otrzymują własne środowisko wykonywania obliczeń,
z własnymi zmiennymi lokalnymi. Mogą też korzystać ze zmiennych globalnych programu.
Funkcje mogą też zwracać wartości przez "return".

Przykład.
def square(n):
    return n*n
Funkcję taką możemy wywołać z różnymi argumentami
a także z argumentem będącym wartością zwróconą przez funkcję,
np. 
square(square(2)) 
zwróci wartość 16.

2 to argument aktualny w square(2)
square(2) to argument aktualny w square(square(2)) 
n to argument formalny w definicji funkcji square

Argumenty funkcji mogą otrzymać wartości domyślne.
Jeśli pominiemy je podczas wywołania funkcji, to przyjmą one 
wartości domyślne.
Argumenty takie muszą(!) wystąpić w deklaracji funkcji
po argumentach bez wartości domyślnych.
Przykład
def wiele_argumentow(arg1, arg2 = 2, arg3 = 3):
    print(f'Wartość arg1 = ", arg1)
    print(f'Wartość arg2 = ", arg2)
    print(f'Wartość arg3 = ", arg3)

Co wypisze
wiele_argumentow(5)
wiele_argumentow(5,6)

Argumenty aktualne możemy też podawać do funkcji używając
nazw argumentów formalnych.
Jest to przydatne, gdy lista argumentów jest długa.
Przykład
wiele_argumentow(arg2 = 3, arg1 = 5)

Możemy też użyć nazw tylko części argumentów, ale wtedy argumenty
pozycyjne muszą wystąpić przed argumentami, do których odnieśliśmy 
się przez nazwę.
wiele_argumentow(1, arg3=8)
